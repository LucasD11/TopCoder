# -*- coding: utf-8 -*-
import math,string,itertools,fractions,heapq,collections,re,array,bisect

class Jewelry:
    def _factorial(self, n):
        result = 1
        for i in range(2, n+1):
            result *= i
        return result

    def _c(self, m, n):
        return self._factorial(n) // self._factorial(m) // self._factorial(n - m)

    def howMany(self, values):
        values = sorted(list(values))

        # countsBob[i][j] means how many ways in values[:i+1] can sum up to j and used values[i]
        tmp = {}
        countsBob = [{} for _ in range(len(values))]
        for i, v in enumerate(values):
            countsBob[i][v] = 1
            for k1, v1 in tmp.items():
                if (k1 + v) not in countsBob[i]:
                    countsBob[i][k1 + v] = 0
                countsBob[i][v + k1] += tmp[k1]
            for k1, v1 in countsBob[i].items():
                if k1 not in tmp:
                    tmp[k1] = 0
                tmp[k1] += v1

        # countsFrank[i][j] means how many ways in values[i:] can sum up to j
        countsFrank = [{} for _ in range(len(values))]
        for start in range(len(values)-1, -1, -1):
            v = values[start]
            countsFrank[start][v] = 1
            if start + 1 >= len(values):
                continue
            for s, count in countsFrank[start+1].items():
                s_new = s + v
                if s_new not in countsFrank[start]:
                    countsFrank[start][s_new] = 0
                countsFrank[start][s_new] += count
                if s not in countsFrank[start]:
                    countsFrank[start][s] = 0
                countsFrank[start][s] += count

        # Calculate counts, pay attention to repeat numbers
        result = 0

        for bob_end_index, bob in enumerate(countsBob[:-1]):
            s_result = 0
            for s_bob, count in bob.items():
                s_result += count * countsFrank[bob_end_index + 1].get(s_bob, 0)

            bob_last = values[bob_end_index]
            bob_last_in_bob = values[:bob_end_index+1].count(bob_last)
            bob_last_total = values.count(bob_last)
            result += s_result * self._c(bob_last_in_bob, bob_last_total)
        return result


# CUT begin
# TEST CODE FOR PYTHON {{{
import sys, time, math

def tc_equal(expected, received):
    try:
        _t = type(expected)
        received = _t(received)
        if _t == list or _t == tuple:
            if len(expected) != len(received): return False
            return all(tc_equal(e, r) for (e, r) in zip(expected, received))
        elif _t == float:
            eps = 1e-9
            d = abs(received - expected)
            return not math.isnan(received) and not math.isnan(expected) and d <= eps * max(1.0, abs(expected))
        else:
            return expected == received
    except:
        return False

def pretty_str(x):
    if type(x) == str:
        return '"%s"' % x
    elif type(x) == tuple:
        return '(%s)' % (','.join( (pretty_str(y) for y in x) ) )
    else:
        return str(x)

def do_test(values, __expected):
    startTime = time.time()
    instance = Jewelry()
    exception = None
    try:
        __result = instance.howMany(values);
    except:
        import traceback
        exception = traceback.format_exc()
    elapsed = time.time() - startTime   # in sec

    if exception is not None:
        sys.stdout.write("RUNTIME ERROR: \n")
        sys.stdout.write(exception + "\n")
        return 0

    if tc_equal(__expected, __result):
        sys.stdout.write("PASSED! " + ("(%.3f seconds)" % elapsed) + "\n")
        return 1
    else:
        sys.stdout.write("FAILED! " + ("(%.3f seconds)" % elapsed) + "\n")
        sys.stdout.write("           Expected: " + pretty_str(__expected) + "\n")
        sys.stdout.write("           Received: " + pretty_str(__result) + "\n")
        return 0

def run_tests():
    sys.stdout.write("Jewelry (500 Points)\n\n")

    passed = cases = 0
    case_set = set()
    for arg in sys.argv[1:]:
        case_set.add(int(arg))

    with open("Jewelry.sample", "r") as f:
        while True:
            label = f.readline()
            if not label.startswith("--"): break

            values = []
            for i in range(0, int(f.readline())):
                values.append(int(f.readline().rstrip()))
            values = tuple(values)
            f.readline()
            __answer = int(f.readline().rstrip())

            cases += 1
            if len(case_set) > 0 and (cases - 1) in case_set: continue
            sys.stdout.write("  Testcase #%d ... " % (cases - 1))
            passed += do_test(values, __answer)

    sys.stdout.write("\nPassed : %d / %d cases\n" % (passed, cases))

    T = time.time() - 1553003851
    PT, TT = (T / 60.0, 75.0)
    points = 500 * (0.3 + (0.7 * TT * TT) / (10.0 * PT * PT + TT * TT))
    sys.stdout.write("Time   : %d minutes %d secs\n" % (int(T/60), T%60))
    sys.stdout.write("Score  : %.2f points\n" % points)

if __name__ == '__main__':
    run_tests()

# }}}
# CUT end
